import * as React from "react";
import { AnchorEnum, PreferedX, PreferedY, LayerSide, LayerDimensions } from "./types";
declare type RenderChildrenProps = {
    isOpen: boolean;
    open: () => void;
    close: () => void;
    toggle: () => void;
    triggerRef: React.RefObject<any>;
    layerSide: LayerSide | null;
};
declare type Placement = {
    anchor: AnchorEnum;
    triggerOffset?: number;
    scrollOffset?: number;
    possibleAnchors?: AnchorEnum[];
    autoAdjust?: boolean;
    snapToAnchor?: boolean;
    preferX?: PreferedX;
    preferY?: PreferedY;
    layerDimensions?: LayerDimensions;
};
declare type DisappearType = "partial" | "full";
export declare type ResultingStyles = {
    layer: React.CSSProperties;
    arrow: React.CSSProperties;
    layerSide: LayerSide;
};
declare type RenderLayerProps = {
    layerProps: {
        ref: (element: HTMLElement | null) => void;
        style: React.CSSProperties;
    };
    arrowStyle: React.CSSProperties;
    layerSide: LayerSide;
    triggerRect: ClientRect | null;
    isOpen: boolean;
    close: () => void;
};
export declare type Props = {
    children: (childrenProps: RenderChildrenProps) => React.ReactNode;
    renderLayer: (props: RenderLayerProps) => React.ReactNode;
    isOpen?: boolean;
    placement: Placement;
    onStyle?: (layerStyle: React.CSSProperties, arrowStyle: React.CSSProperties, layerSide: LayerSide) => void;
    closeOnOutsideClick?: boolean;
    onOutsideClick?: () => void;
    closeOnDisappear?: DisappearType;
    onDisappear?: (type: DisappearType) => void;
    ResizeObserver?: any;
    fixed?: boolean;
    container?: HTMLElement | (() => HTMLElement);
};
declare function ToggleLayer({ children, renderLayer, placement, onStyle, isOpen: isOpenExternal, closeOnOutsideClick, onOutsideClick, onDisappear, closeOnDisappear, fixed, container, ...props }: Props): JSX.Element;
export default ToggleLayer;
